{"name":"Astro","tagline":"High performance SQL layer over HBase by using Spark SQL framework.","body":"### Welcome to Astro.\r\nAstro is fully distributed SQL engine on HBase by leveraging Spark ecosystem. It enables systematic and powerful handling of data pruning, intelligent scan, and pushdowns like custom filters and coprocessor, and make more traditional RDBS capabilities possible.  \r\n![Architecture](images/astro_architecture.png)\r\n### Why Astro\r\nHBase is a very useful big data store but its access mechanism is very primitive and only through client-side APIs, Map/Reduce interfaces and interactive shells. Astro provides SQL layer over Hbase, so it takes your SQL query, compiles it into optimized Spark plan and in turn it does series of HBase scans to result sets.User do not require to write any complex client code to access HBase  tables.\r\n\r\nFor example,to count rows in Hbase table we need to write following code.\r\n```\r\npublic class MyAggregationClient {\u000B\r\n    private static final byte[] TABLE_NAME = Bytes.toBytes(\"CNCC_Demo\");\u000B\r\n    private static final byte[] CF = Bytes.toBytes(\"f1\");\u000B\r\n    public static void main(String[] args) throws Throwable {\r\n\u000B        Configuration customConf = new Configuration();\r\n\u000B        customConf.setStrings(\"hbase.zookeeper.quorum\",\"node0,node1,node2\");\u000B\r\n        customConf.setLong(\"hbase.rpc.timeout\", 600000);\r\n\u000B        customConf.setLong(\"hbase.client.scanner.caching\", 1000);\u000B\r\n        Configuration configuration = HBaseConfiguration.create(customConf);\r\n\u000B        AggregationClient aggregationClient = new AggregationClient(configuration);\u000B\r\n        Scan scan = new Scan();\u000B        scan.addFamily(CF);\r\n\u000B        long rowCount = aggregationClient.rowCount(TABLE_NAME, null, scan);\r\n\u000B        System.out.println(\"row count is \" + rowCount);\u000B    }\u000B}\r\n```\r\nBut if we use Astro just create table schema and fire the SQL query.\r\n```\r\nselect  count(*)  from CNCC_Demo;\r\n```\r\n```\r\nCREATE TABLE CNCC_Demo (\r\n      index          INTEGER,\r\n      event_time     STRING,\r\n      country        STRING,\r\n      site           STRING,\r\n      PRIMARY KEY(index))\r\n      MAPPED BY (CNCC_Demo, COLS=   [event_time=f1.c1,country=f1.c2,site=f2.c1]);\r\n```\r\n\r\n\r\n### Getting Started\r\nBuilding, Deployment and Quick start is provided [here](https://github.com/ravipesala/astro/wiki/Getting-Started)\r\n\r\n### Contributing to Astro\r\nHow to contribute to Astro is provided [here](https://github.com/ravipesala/astro/wiki/How-to-contribute-to-Astro)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}